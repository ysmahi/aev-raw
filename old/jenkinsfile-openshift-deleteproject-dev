#!/usr/bin/env groovy

// Use node dedicated to Java compilation
node('SlaveABS') {
    def mailRecipients = 'demarju@allianz.fr'
    def deleteProjects = true

    properties([
            parameters([
                    string(defaultValue: "", description: 'Systeme applicatif ?', name: 'systemeApplicatif'),
                    string(defaultValue: "", description: 'Nom application ?', name: 'nomApplication'),
            ])
    ])

    try{
        stage('Check parameters') {
            if (
            params.systemeApplicatif=='' || !params.systemeApplicatif ||
                    params.nomApplication=='' || !params.nomApplication){
                throw  new IllegalArgumentException('Les arguments passes en parametres sont incorrects (ou vides)')
            }
        }
        // Download source code
        stage('Preparation') {
            checkout scm
        }

        stage('get all projects and delete specifics one') {
            withEnv(["PATH=${env.PATH}"]) {
                openshift.withCluster('CRP') {
                    def appName = "azf-${params.systemeApplicatif}-${params.nomApplication}"

                    println "Recherche du projet ${appName}-cicd"
                    openshift.withProject("azf-cicd") {
                        def projectCicdExist = openshift.selector("projects/${appName}-cicd")
                        println "Nb Projet cicd trouve : ${projectCicdExist.count()}"
                        if (projectCicdExist.count() > 0) {
                            println "Projet trouve : ${appName}-cicd"
                            //do not delete -> cause raw task will fail on execution
                            println "Liste des projets au travers du ${appName}-cicd"
                            def projects = openshift.selector('project')

                            projects.withEach {
                                if ("${it.name()}".startsWith("projects/${appName}-")
                                ) {
                                    echo "Projet trouve : ${it.name()}"
                                    if (!"${it.name()}".startsWith("projects/${appName}-dev")
                                            && !"${it.name()}".startsWith("projects/${appName}-cicd")) {
                                        deleteProjects = false
                                        echo "Projet trouve non dev: ${it.name()}"
                                        return true
                                    }
                                }
                            }
                        } else {
                            println "le projet ${appName}-cicd n existe pas"
                            deleteProjects = false
                        }
                    }
                }
            }
        }
        stage ('delete env dev'){
            if (deleteProjects) {
                def common = load("${pwd()}/jenkinsfile-openshift-common-create")
                common.deleteEnv('dev', "${params.systemeApplicatif}", "${params.nomApplication}")
                common.deleteEnv('cicd', "${params.systemeApplicatif}", "${params.nomApplication}")
            } else {
                echo 'Projets non detruits'
            }
        }

    } catch (e) {
        // Tell Mailer that something went wrong
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        // Send mail if task broke or is repaired
        step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: mailRecipients, sendToIndividuals: true])
    }
}
