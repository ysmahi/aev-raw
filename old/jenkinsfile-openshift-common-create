#!/usr/bin/env groovy

def createEnv(String environnement, String systemeApplicatif, String nomApplication) {
    def email = ''
    wrap([$class: 'BuildUser']) {
        println "---------- info user ------------"
        println "user   : ${BUILD_USER}"
        println "nom    : ${BUILD_USER_FIRST_NAME}"
        println "prenom : ${BUILD_USER_LAST_NAME}"
        println "id     : ${BUILD_USER_ID}"
        println "email  : ${BUILD_USER_EMAIL}"
        println "---------------------------------"
        email = "${BUILD_USER_EMAIL}"
    }

    withEnv(["PATH=${env.PATH}"]) {

        openshift.withCluster('CRP') {
            println "Definition du nom d application"
            def appName = "azf-${systemeApplicatif}-${nomApplication}"
            def imgTag = ''
            println "Parametrage du tag de l image stream"
            if ("${environnement}" == 'dev'){
                imgTag = ':latest'
            } else {
                imgTag = ":${environnement}"
            }
            println "Definition des points de montage de configmap et secret (appconf et appsecret)"
            def appConfPath ='/etc/appconf'
            def appSecretPath ='/etc/appsecret'

            def cpuLimit = '250m'
            if (params.cpuLimit){
                println "Ecrasement du parametrage cpuLimit"
                cpuLimit = params.cpuLimit
            }

            def memLimit = '512Mi'
            if (params.memLimit){
                println "Ecrasement du parametrage memLimit"
                memLimit = params.memLimit
            }

            def nbPods = '1'
            if (params.nbPods){
                println "Ecrasement du parametrage nbPods"
                nbPods = params.nbPods
            }


            println "Passage dans le projet cicd"
            def app_type = '';
            //do not delete -> cause raw task will fail on execution
            openshift.withProject("${appName}-cicd") {
                //le app_type a ete ajoute en label dans le bc !
                //répétion du type template depuis le BuildConfig
                println "Répétion du type template depuis le BuildConfig"
                def p = openshift.selector( "bc/${appName}" ).object()
                app_type = p.metadata.labels['app_type'] // Adjust the model
                println "typeTemplate recupere : ${app_type}"
                if ("${app_type}" == ''){
                    throw new IllegalArgumentException('app_type ne doit pas etre vide dans le BuildConfig !')
                }

                println "Creation du projet ${environnement}"
                openshift.newProject("${appName}-${environnement}")
            }
            println "Passage dans le projet  ${environnement}"
            openshift.withProject("${appName}-${environnement}") {
                println "Definition et recuperation du model yaml"
                def modelAppYaml = openshift.process( "azf-cicd//${app_type}-azf-env",
                        "-p","APPLICATION_NAME=${appName}",
                        "-p", "APP_ENV=${environnement}",
                        "-p", "APP_TYPE=${app_type}",
                        "-p", "IMAGE_TAG=${imgTag}",
                        "-p", "APPCONF_PATH=${appConfPath}",
                        "-p", "APPSECRET_PATH=${appSecretPath}",
                        "-p", "CPU_LIMIT=${cpuLimit}",
                        "-p", "MEM_LIMIT=${memLimit}",
                        "-p", "REPLICA_COUNT=${nbPods}",
                )
                println "creation de l environnement"
                def created = openshift.create( modelAppYaml , '-n', "${appName}-${environnement}" )
                println "ajout des roles utilisateur"
                def rolesCommand = openshift.raw('adm', 'policy',
                        'add-role-to-user',
                            'admin',
                                'julien.demare_2@allianz.fr',
                                'laurent.cessat_2@allianz.fr',
                                'mohammed.bellamri@allianz.fr',
                                'eric.bouffetier@allianz.fr',
                                'franck.gerodou@allianz.fr',
                                "${email}"
                )

                println "ajout des roles image puller (deployer & default) pour le projet ${environnement} dans le projet cicd"
                def rolesCommand2 = openshift.raw('adm', 'policy',
                        'add-role-to-user',
                            'system:image-puller',
                                "system:serviceaccount:${appName}-${environnement}:deployer",
                                "system:serviceaccount:${appName}-${environnement}:default",
                        '-n',"${appName}-cicd"
                )
            }
        }
    }
}

def deleteEnv(String environnement, String systemeApplicatif, String nomApplication) {
    def appName = "azf-${systemeApplicatif}-${nomApplication}"

    println "/!\\ Suppresion du projet ${appName}-${environnement}/!\\"
    openshift.withCluster('CRP') {
        openshift.withProject("azf-cicd") {
            openshift.selector('project', "${appName}-${environnement}").delete()
        }
    }
    println "/!\\ Projet supprime ${appName}-${environnement}/!\\"
}

return this
